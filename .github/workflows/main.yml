name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write

jobs:
  
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: forum
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run migrations and tests
      run: |
        python manage.py makemigrations authentication
        python manage.py migrate authentication
        python manage.py makemigrations profiles
        python manage.py migrate profiles
        python manage.py makemigrations
        python manage.py migrate
        python manage.py test
      env:
        SECRET_KEY: "+n4ln69zapa2gw2f8l26#v5vyry^jdo3nx)*w*px)c3l3j%bhl"
        PG_DB: forum
        PG_USER: postgres
        PG_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        PGADMIN_EMAIL: admin@admin.com
        PGADMIN_PASSWORD: MTNy7neRDqAL8YBw
        DJANGO_SUPERUSER_EMAIL: admin@mail.net
        DJANGO_SUPERUSER_USERNAME: admin
        DJANGO_SUPERUSER_PASSWORD: 7znYRa4ZzYrxvmRN
        EMAIL_BACKEND: django.core.mail.backends.smtp.EmailBackend
        EMAIL_HOST: someuser@gmail.com
        EMAIL_PORT: 587
        EMAIL_USE_TLS: 1
        EMAIL_HOST_USER: test@test.com
        EMAIL_HOST_PASSWORD: gHfQPdVnK3MST2K8
        CORS_ORIGIN_WHITELIST: ""
  
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Get latest version
      id: get_version
      run: |
        PACKAGE_NAME="app"
        VERSIONS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/orgs/${{ github.repository_owner }}/packages/container/${PACKAGE_NAME}/versions" \
          | jq -r '.[].metadata.container.tags[]' \
          | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' || echo "0.0.0")
          
        LATEST_VERSION=$(echo "$VERSIONS" | sort -V | tail -n1)
        echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_OUTPUT
    
    - name: Bump version
      id: bump_version
      run: |
        IFS='.' read -ra VERSION_PARTS <<< "${{ steps.get_version.outputs.LATEST_VERSION }}"
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=$((${VERSION_PARTS[2]:-0} + 1))
        NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
        echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_OUTPUT
  
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/app:latest
          ghcr.io/${{ github.repository }}/app:${{ steps.bump_version.outputs.NEW_VERSION }}
